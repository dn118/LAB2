{"version":3,"sources":["components/DataProvider.js","components/FormInput.js","components/ListItem.js","components/List.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","todos","setTodos","useEffect","todoStore","JSON","parse","localStorage","getItem","setItem","stringify","Provider","value","children","FormInput","useContext","todoName","setTodoName","todoInput","useRef","current","focus","autoComplete","onSubmit","e","preventDefault","name","complete","type","id","ref","required","placeholder","onChange","target","toLowerCase","ListItem","todo","checkComplete","handleEditTodos","onEdit","setOnEdit","editValue","setEditValue","onClick","handleSave","htmlFor","className","checked","disabled","List","switchComplete","newTodos","forEach","index","editvalue","map","key","Footer","checkAll","setCheckAll","newTodosComplete","filter","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.077bf151.chunk.js","sourcesContent":["import React, {useState, useEffect, createContext} from 'react'\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n    const [todos, setTodos] = useState([])\r\n    \r\n    useEffect(() =>{\r\n        const todoStore = JSON.parse(localStorage.getItem('todoStore'))\r\n        if(todoStore) setTodos(todoStore)\r\n    },[])\r\n\r\n    useEffect(() =>{\r\n        localStorage.setItem('todoStore', JSON.stringify(todos))\r\n    },[todos])\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <DataContext.Provider value={[todos, setTodos]}>\r\n            {props.children}\r\n        </DataContext.Provider>\r\n    )\r\n}\r\n","import React, {useState, useContext, useRef, useEffect} from 'react'\r\nimport {DataContext} from './DataProvider'\r\n\r\n\r\nexport default function FormInput() {\r\n    const [todos, setTodos] = useContext(DataContext);\r\n    const [todoName, setTodoName] = useState('');\r\n    const todoInput = useRef();\r\n\r\n    const addTodo = e =>{\r\n        e.preventDefault();\r\n        setTodos([...todos, {name: todoName, complete: false}])\r\n        setTodoName('');\r\n        todoInput.current.focus();\r\n    }\r\n\r\n    useEffect(() =>{\r\n        todoInput.current.focus();\r\n    },[])\r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={addTodo}>\r\n            <input type=\"text\" name=\"todos\" id=\"todos\" ref={todoInput}\r\n            required placeholder=\"What needs to be done?\" value={todoName} \r\n            onChange={e => setTodoName(e.target.value.toLowerCase())} />\r\n\r\n            <button type=\"submit\">Create</button>\r\n        </form>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function ListItem({todo,id,checkComplete,handleEditTodos}) {\r\n    const [onEdit, setOnEdit] = useState(false)\r\n    const [editValue, setEditValue] = useState(todo.name)\r\n\r\n    const handleOnEdit = () =>{\r\n        setOnEdit(true)\r\n    }\r\n\r\n    const handleSave = id =>{\r\n        setOnEdit(false)\r\n        if(editValue){\r\n            handleEditTodos(editValue,id)\r\n        }else{\r\n            setEditValue(todo.name)\r\n        }\r\n    }\r\n\r\n    if(onEdit){\r\n        return (\r\n            <li>\r\n                <input type=\"text\" id=\"editValue\" value={editValue} \r\n                name=\"editValue\" \r\n                onChange={e => setEditValue(e.target.value.toLowerCase())} />\r\n\r\n                <button onClick={() => handleSave(id)}>Save</button>\r\n            </li>\r\n        )\r\n    }else{\r\n        return (\r\n            <li>\r\n                <label htmlFor={id} className={todo.complete ? \"active\" : \"\"}>\r\n                    <input type=\"checkbox\" id={id} checked={todo.complete}\r\n                    onChange={() => checkComplete(id)} />\r\n                    {todo.name}\r\n                </label>\r\n                <button disabled={todo.complete} onClick={handleOnEdit}>Edit</button>\r\n            </li>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React, {useContext} from 'react'\r\nimport ListItem from './ListItem'\r\nimport {DataContext} from './DataProvider'\r\n\r\nexport default function List() {\r\n    const [todos, setTodos] = useContext(DataContext);\r\n\r\n    const switchComplete = id =>{\r\n        const newTodos = [...todos]\r\n        newTodos.forEach((todo, index) =>{\r\n            if(index === id){\r\n                todo.complete = !todo.complete\r\n            }\r\n        })\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    const handleEditTodos = (editvalue, id) =>{\r\n        const newTodos = [...todos]\r\n        newTodos.forEach((todo, index) =>{\r\n            if(index === id){\r\n                todo.name = editvalue\r\n            }\r\n        })\r\n        setTodos(newTodos)\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {\r\n                todos.map((todo, index) => (\r\n                    <ListItem todo={todo} key={index} id={index}\r\n                    checkComplete={switchComplete} handleEditTodos={handleEditTodos} />\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","import React, {useContext, useState} from 'react'\r\nimport {DataContext} from './DataProvider'\r\n\r\nexport default function Footer() {\r\n    const [checkAll, setCheckAll] = useState(false)\r\n    const [todos,setTodos] = useContext(DataContext)\r\n\r\n    const handleCheckAll = () =>{\r\n        const newTodos = [...todos]\r\n        newTodos.forEach(todo =>{\r\n            todo.complete = !checkAll\r\n        })\r\n        setTodos(newTodos)\r\n        setCheckAll(!checkAll)\r\n    }\r\n\r\n    const newTodosComplete = () =>{\r\n        return todos.filter(todo => todo.complete === false)\r\n    }\r\n\r\n    const deleteTodo = () =>{\r\n        setTodos(newTodosComplete())\r\n        setCheckAll(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            todos.length === 0 ? <h2>Congratulations! Nothings To Do</h2> \r\n                :  <div className=\"row\">\r\n                    <label htmlFor=\"all\">\r\n                        <input type=\"checkbox\" name=\"all\" id=\"all\"\r\n                        onChange={handleCheckAll} checked={checkAll} />\r\n                        ALL\r\n                    </label>\r\n                    <p>You have {newTodosComplete().length} to do</p>\r\n                    <button id=\"delete\" onClick={deleteTodo}>Delete</button>\r\n                </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport FormInput from './components/FormInput'\nimport List from './components/List'\nimport Footer from './components/Footer'\nimport {DataProvider} from './components/DataProvider'\n\n\nfunction App() {\n  return (\n    <DataProvider>\n      <div className=\"App\">\n        <h1>To Do List</h1>\n        <FormInput />\n        <List />\n        <Footer />\n      </div>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}